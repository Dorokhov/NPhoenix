using System.Diagnostics.Contracts;
using NPhoenix.Interop;

namespace NPhoenix.Client
{
    /// <summary>
    /// A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
    /// </summary>
    public class ResultSet
    {
        private readonly java.lang.Object _resultSet;

        internal ResultSet(java.lang.Object resultSet)
        {
            Contract.Requires(resultSet != null);
            _resultSet = resultSet;
        }

        /// <summary>
        /// Moves the cursor forward one row from its current position. A ResultSet cursor is initially positioned before the first row; the first call to the method next makes the first row the current row; the second call makes the second row the current row, and so on. 
        /// When a call to the next method returns false, the cursor is positioned after the last row. Any invocation of a <see cref="ResultSet"/> method which requires a current row will result in a <see cref="NPhoenixSqlException"/> being thrown. 
        /// If an input stream is open for the current row, a call to the method next will implicitly close it. A ResultSet object's warning chain is cleared when a new row is read.
        /// </summary>
        /// <returns>true if the new current row is valid; false if there are no more rows</returns>
        public bool Next()
        {
            return _resultSet.Next();
        }

        /// <summary>
        /// Retrieves the value of the designated column in the current row of this <see cref="ResultSet"/> object as a <see cref="System.String"/>.
        /// </summary>
        /// <param name="columnName">column name</param>
        /// <returns>result of string type</returns>
        public string GetString(string columnName)
        {
            return _resultSet.GetString(columnName);
        }
    }
}